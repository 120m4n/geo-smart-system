const s=new class{constructor(){this.subIds=0,this.subscriptions={}}subscribe(s,e){this.subscriptions[s]||(this.subscriptions[s]={});const t=++this.subIds;return this.subscriptions[s][t]=e,()=>this.unsubscribe(s,t)}publish(s,...e){const t=this.subscriptions[s];if(!t)return!1;Object.values(t).forEach(s=>s(...e))}unsubscribe(s,e){e||delete this.subscriptions[s],this.subscriptions[s]&&delete this.subscriptions[s][e]}};var e=window.parent;class t{constructor(s,e,t,i=new Date){this.type=s,this.action=e,this.payload=t,this.timestamp=i}}function i(s,e,i,o){if(s){const n=new t(e,i,o);s.postMessage(n,"*")}}const o=()=>{window.addEventListener("message",e=>{const t=e.data;if(t&&"object"==typeof t&&"type"in t&&"action"in t&&"payload"in t){if("request"!==t.type||t.action||console.log("RECEIVED message from PARENT TO CHILD",t.payload),"request"===t.type&&"initialView"===t.action){if(!("longitud"in t.payload)||!("latitud"in t.payload)||!("zoom"in t.payload))return void console.log("Received message with unexpected structure",t);s.publish("initialView",t.payload)}"request"===t.type&&"cargarSeleccion"===t.action&&s.publish("cargarSeleccion",t.payload)}else console.log("Received message with unexpected structure",t)}),window.addEventListener("load",()=>{setTimeout(function(){i(e,"response","shakehand",!0)},500)}),s.subscribe("feedbackParent",s=>{const t=s.type?s.type:"feedbackParent",o=s.body?s.body:{};i(e,"response",t,o)})};export{s as P,o as i};
